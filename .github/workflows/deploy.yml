name: CI-CD

# 이벤트 트리거 설정
# push 이벤트 발생 시 실행
# release 브랜치에 push가 이루어졌을 때만 워크플로우 실행
on:
  push:
    branches:
      - release

# 환경 변수
env:
  S3_BUCKET_NAME: tickerbell-s3
  CODE_DEPLOY_APPLICATION_NAME: tickerBell-codeDeploy-application
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: tickerBell-deploy-group

# 작업 정의
jobs:
  build:
    runs-on: ubuntu-latest # 가장 최신 버전의 우분투를 사용

    steps:
      - name: Checkout # 저장소 체크아웃
        uses: actions/checkout@v2

      - name: Set up JDK 17 # JDK 17 설치
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: 17

      - name: Set Environment Variables for Spring Boot
        run: |
            echo "spring.datasource.url=jdbc:mysql://${DB_ENDPOINT}:3306/${DB_SCHEMA_NAME}" >> $GITHUB_WORKSPACE/application.properties
            echo "spring.datasource.username=${DB_USERNAME}" >> $GITHUB_WORKSPACE/application.properties
            echo "spring.datasource.password=${DB_PASSWORD}" >> $GITHUB_WORKSPACE/application.properties
        env:
          DB_ENDPOINT: ${{ secrets.DB_ENDPOINT }}
          DB_SCHEMA_NAME: ${{ secrets.DB_SCHEMA_NAME }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

      - name: Grant execute permission for gradlew # gradlew 실행 권한 부여
        run: chmod +x ./gradlew
        shell: bash

      - name: Build with Gradle  # Gradle 사용하여 빌드
        run: ./gradlew build
        shell: bash

      - name: Make zip file # zip 파일 생성
        run: zip -r ./$GITHUB_SHA .
        shell: bash

      - name: Configure AWS credentials # AWS 인증 정보 설정
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload to S3 # 생성된 zip 파일을 S3에 업로드
        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip

      - name: Code Deploy
        run: |
          aws deploy create-deployment \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
          --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
          --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=$GITHUB_SHA.zip
