name: Java CI with Gradle

# 동작 조건 설정 : main 브랜치에 push 혹은 pull request가 발생할 경우 동작한다.
on:
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  # Spring Boot 애플리케이션을 빌드하여 도커허브에 푸시하는 과정
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      # 1. Java 17 세팅
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 2. Spring Boot 애플리케이션 빌드
      - name: Build with Gradle
        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
        with:
          arguments: clean bootJar

      # 3. Docker 이미지 빌드
      - name: docker image build
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/tickerbell .

      # 4. DockerHub 로그인
      - name: docker login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 5. Docker Hub 이미지 푸시
      - name: docker Hub push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/tickerbell

  run-docker-image-on-ec2:
    # build (위)과정이 완료되어야 실행됩니다.
    needs: build-docker-image
    runs-on: self-hosted

    steps:
      # 최신 이미지를 풀받습니다
      - name: docker pull
        run: sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/tickerbell

      # 기존의 컨테이너를 중지시킵니다
      - name: docker stop container
        run: sudo docker stop $(sudo docker ps -q) 2>/dev/null || true

      # 최신 이미지를 컨테이너화하여 실행시킵니다
      - name: docker run new container
        run: sudo docker run --name tickerbell --rm -d -e ACCESS_KEY=${{ secrets.ACCESS_KEY }} -e DB_ENDPOINT=${{ secrets.DB_ENDPOINT }} -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} -e DB_USERNAME=${{ secrets.DB_USERNAME }} -e KAKAO_API_KEY=${{ secrets.KAKAO_API_KEY }} -e KAKAO_REDIRECT=${{ secrets.KAKAO_REDIRECT }} -e SECRET_ACCESS_KEY=${{ secrets.SECRET_ACCESS_KEY }} -e SECRET_KEY=${{ secrets.SECRET_KEY }} -e SMS_ACCESS_KEY=${{ secrets.SMS_ACCESS_KEY }} -e SMS_SECRET_KEY=${{ secrets.SMS_SECRET_KEY }} -e SMS_SENDER_PHONE=${{ secrets.SMS_SENDER_PHONE }} -e SMS_SERVICE_ID=${{ secrets.SMS_SERVICE_ID }} -e MAP_API_KEY_ID=${{ secrets.MAP_API_KEY_ID }} -e MAP_API_KEY=${{ MAP_API_KEY }} -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/tickerbell

      # 미사용 이미지를 정리합니다
      - name: delete old docker image
        run: sudo docker system prune -f

#name: CI-CD
#
## 이벤트 트리거 설정
## push 이벤트 발생 시 실행
## release 브랜치에 push가 이루어졌을 때만 워크플로우 실행
#on:
#  push:
#    branches:
#      - release
#
## 환경 변수
#env:
#  S3_BUCKET_NAME: tickerbell-s3
#  CODE_DEPLOY_APPLICATION_NAME: tickerBell-codeDeploy-application
#  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: tickerBell-deploy-group
#
## 작업 정의
#jobs:
#  build:
#    runs-on: ubuntu-latest # 가장 최신 버전의 우분투를 사용
#
#    steps:
#      - name: Checkout # 저장소 체크아웃
#        uses: actions/checkout@v2
#
#      - name: Set up JDK 17 # JDK 17 설치
#        uses: actions/setup-java@v2
#        with:
#          distribution: 'adopt'
#          java-version: 17
#
#      - name: Grant execute permission for gradlew # gradlew 실행 권한 부여
#        run: chmod +x ./gradlew
#        shell: bash
#
#      - name: Build with Gradle  # Gradle 사용하여 빌드
#        run: ./gradlew build -x test
#        shell: bash
#
#      - name: Make zip file # zip 파일 생성
#        run: zip -r ./$GITHUB_SHA .
#        shell: bash
#
#      - name: Configure AWS credentials # AWS 인증 정보 설정
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ${{ secrets.AWS_REGION }}
#
#      - name: Upload to S3 # 생성된 zip 파일을 S3에 업로드
#        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip
#
#      - name: Code Deploy
#        run: |
#          aws deploy create-deployment \
#          --deployment-config-name CodeDeployDefault.AllAtOnce \
#          --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
#          --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
#          --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=$GITHUB_SHA.zip