plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.10'
	id 'io.spring.dependency-management' version '1.1.3'
	// jacoco 추가
	id 'jacoco'
}

// jacoco 추가
jacoco {
	toolVersion = "0.8.7" // JaCoCo 버전을 필요에 맞게 업데이트하세요.
}

group = 'com'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'


	// https://hipopatamus.tistory.com/135 [p6spy, querydsl 해당 블로그 참고]
	// p6spy
	implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'

	// querydsl
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// https://wonsjung.tistory.com/584 [swagger 해당 블로그 참고]
	// swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

	// jwt
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// firebase sdk
	implementation 'com.google.firebase:firebase-admin:7.1.0'

	// WebClient 라이브러리
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'mysql:mysql-connector-java:8.0.32'

	// redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis:2.3.1.RELEASE'

	// 타임리프
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

	// s3
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

	// spring batch
	implementation 'org.springframework.boot:spring-boot-starter-batch'

	// LocalDateTime 역직렬화
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
	implementation 'com.fasterxml.jackson.core:jackson-databind'

	// redis Mock
	testImplementation "org.testcontainers:testcontainers:1.19.1"
	testImplementation "org.testcontainers:junit-jupiter:1.19.1"

	// static 메소드 stub
	testImplementation 'org.mockito:mockito-inline:3.6.0'

	// graphql
	implementation 'org.springframework.boot:spring-boot-starter-graphql'
	testImplementation 'org.springframework.graphql:spring-graphql-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

//SNAPSHOT 생성 x
jar {
	enabled = false
}

// 테스트 태스크 설정
test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport // 테스트 후 JaCoCo 리포트 생성
}

// 리포트 생성 명령어: ./gradlew --console verbose test jacocoTestReport jacocoTestCoverageVerification
// JaCoCo 리포트 설정
jacocoTestReport {
	reports {
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"**/Q*.class",
					"**/*Dto.*",
					"**/*dto*"
			])
		}))
	}
}

clean {
	delete file('src/main/generated')
}